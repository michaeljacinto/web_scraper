"""

    Tests:
        Module Installation 
        >>> import sys
        >>> 'requests' in sys.modules
        True
        >>> 'bs4' in sys.modules
        True
        >>> 'jinja2' in sys.modules
        True

        Module Import 
        >>> variable_list = globals()
        >>> 'os' in variable_list
        True
        >>> 'webbrowser' in variable_list
        True
        >>> 'inspect' in variable_list
        True
        >>> 'datetime' in variable_list
        True
        >>> 'sites' in variable_list
        True
        >>> 'html_parser' in variable_list
        True
        >>> 'html_writer' in variable_list
        True
"""""""""

# Imports used for doctest
import http.server
import multiprocessing
import socketserver
from types import SimpleNamespace
import datetime, inspect, os, webbrowser, sys
import jinja2, bs4, requests
import sites, html_parser, html_writer, _datetime, datetime



# TODO: Deliverable 3 Imports

def generate_site_module_list() -> list:
    """
    Function thtat generates a  list of sites containing the a tuple of the
    site/module name and a module. This module should include:
        variable url: string,
        variable headline_selector: string holding a css selector
        variable get_headline_url: function

    This list is generated by iterating over all of the module members of the
    sites package.

    Returns:
        list of sites containing the a tuple of the site/module name and a
        dictionary of the module members including
            'url': string of the website URL
            'headline_selector': string holding a css selector for headline elements
            'get_headline_url ': function to retrieve URL based on headline element

        This could be depicted as:
            site_module_list = [ ("site_1_module",
                                  { 'url' : 'http://site_1/',
                                   'headline_selector' : 'h2.news',
                                   'get_headline_url' : <function> } ),
                                  ("site_2_module",
                                   { 'url' : 'http://site_2/',
                                    'headline_selector' : 'h2.news',
                                    'get_headline_url' : <function> } ),

    Test:
        >>> sites = generate_site_module_list()
        >>> for site in sites: #doctest: +NORMALIZE_WHITESPACE
        ...     print('Module: {}\\nurl: {}\\nheadline_selector: "{}" \\nget_headline_url Function: \\n{}'.format(
        ...                                                                                                 site[0],
        ...                                                                                                 site[1].url,
        ...                                  site[1].headline_selector,
        ...                                  inspect.getsource(site[1].get_headline_url)))
        Module: arstechnica
        url: https://arstechnica.com
        headline_selector: "h2 > a"
        get_headline_url Function:
        def get_headline_url(element):
            return element.attrs['href']
        <BLANKLINE>
        Module: bcit_student_stories
        url: https://commons.bcit.ca/news/category/student-stories
        headline_selector: "h2 > a"
        get_headline_url Function:
        def get_headline_url(element):
            return element.attrs['href']
        <BLANKLINE>
        Module: globe_and_mail
        url: https://www.theglobeandmail.com
        headline_selector: "span.o-card__hed-text"
        get_headline_url Function:
        def get_headline_url(element):
            return url + element.parent.parent.parent.parent.parent.attrs['href']
        <BLANKLINE>
    """

    sites_list = inspect.getmembers(sites, inspect.ismodule)

    return sites_list


def generate_headline_dict(sites):
    """

    Args:
        sites:
            list of sites containing the a tuple of the site/module name and a
            module with members that include
                'url': string of the website URL
                'headline_selector': string holding a css selector for headline elements
                'get_headline_url ': function to retrieve URL based on headline element

    Returns:
        a nested set of dictionaries in the form

        content = { 'site1_name': { 'content1_text': 'content1_url',
                                    'content2_text': 'content2_url' },
                    'site2_name': { 'content1_test': 'content1_url',
                                    'content2_text': 'content2_url' } }

   """

    headline_dict = {}
    for site_module in sites:
        headline_dict[site_module[0]] = html_parser.get_element_urls(
                                     site_module[1].url,
                                     site_module[1].headline_selector,
                                     site_module[1].get_headline_url)

    return headline_dict


def get_my_news():
    """
    generates a personal news page `dd_mm_yyy_news.html`

    where `dd `is the date, `mm` is the month, and `yyyy` is the year of today's
    date.

    This page will contain a title and a heading for each "news source". Under this
    heading will be a number of headlines built by "scraping" the specified site.
    URL.

    Each of these headlines will have an anchor with a reference to the actual
    article url.

    The sites are based on the package sites.  Within this package is a module
    for each site to be scraped. The contents of these modules are described in
    generate site module list.

    Returns:
        None

    """

    # TODO: Deliverable 5 Generate list of site_modules

    site_list = generate_site_module_list()

    # TODO: Deliverable 6 Generate Headlines Dictionary

    site_dict = generate_headline_dict(site_list)

    # TODO: Deliverable 7 Generate HTML String

    html_string = html_writer.gen_page(site_dict)

    # TODO: Deliverable 8 Generate Output Filename

    format = "%d-%m-%y"
    x = datetime.datetime.strftime(datetime.datetime.today(), format)
    file_name = x + '_news.html'

    # TODO: Deliverable 9  Get full path of the output file assuming it is in the current directory

    file1 = os.path.abspath(file_name)

    # TODO: Deliverable 10 Write the HTML to the output file

    script_dir = os.path.dirname(file1)
    write_path = os.path.join(script_dir, file1)
    write_file = open(write_path, 'w')

    write_file.write(html_string)


    # TODO: Deliverable 11 Generate the URL to the output file


    #

    url_name = 'file://' + file1

    # TODO: Deliverable 12 Open URL in a Web Browser

    webbrowser.open(url_name)

if __name__ == '__main__':
    get_my_news()

